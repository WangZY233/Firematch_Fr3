// Generated by gencpp from file ros_control_boilerplate/statefb.msg
// DO NOT EDIT!


#ifndef ROS_CONTROL_BOILERPLATE_MESSAGE_STATEFB_H
#define ROS_CONTROL_BOILERPLATE_MESSAGE_STATEFB_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_control_boilerplate
{
template <class ContainerAllocator>
struct statefb_
{
  typedef statefb_<ContainerAllocator> Type;

  statefb_()
    : statuswd()
    , actpos()
    , err()
    , torque()  {
      statuswd.assign(0);

      actpos.assign(0);

      err.assign(0);

      torque.assign(0);
  }
  statefb_(const ContainerAllocator& _alloc)
    : statuswd()
    , actpos()
    , err()
    , torque()  {
  (void)_alloc;
      statuswd.assign(0);

      actpos.assign(0);

      err.assign(0);

      torque.assign(0);
  }



   typedef boost::array<uint16_t, 6>  _statuswd_type;
  _statuswd_type statuswd;

   typedef boost::array<int32_t, 6>  _actpos_type;
  _actpos_type actpos;

   typedef boost::array<uint16_t, 6>  _err_type;
  _err_type err;

   typedef boost::array<int16_t, 6>  _torque_type;
  _torque_type torque;





  typedef boost::shared_ptr< ::ros_control_boilerplate::statefb_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_control_boilerplate::statefb_<ContainerAllocator> const> ConstPtr;

}; // struct statefb_

typedef ::ros_control_boilerplate::statefb_<std::allocator<void> > statefb;

typedef boost::shared_ptr< ::ros_control_boilerplate::statefb > statefbPtr;
typedef boost::shared_ptr< ::ros_control_boilerplate::statefb const> statefbConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_control_boilerplate::statefb_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_control_boilerplate::statefb_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_control_boilerplate::statefb_<ContainerAllocator1> & lhs, const ::ros_control_boilerplate::statefb_<ContainerAllocator2> & rhs)
{
  return lhs.statuswd == rhs.statuswd &&
    lhs.actpos == rhs.actpos &&
    lhs.err == rhs.err &&
    lhs.torque == rhs.torque;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_control_boilerplate::statefb_<ContainerAllocator1> & lhs, const ::ros_control_boilerplate::statefb_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_control_boilerplate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_control_boilerplate::statefb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_control_boilerplate::statefb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_control_boilerplate::statefb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_control_boilerplate::statefb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_control_boilerplate::statefb_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_control_boilerplate::statefb_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_control_boilerplate::statefb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ea94b11d87b20693912a0151f6e0d36";
  }

  static const char* value(const ::ros_control_boilerplate::statefb_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ea94b11d87b2069ULL;
  static const uint64_t static_value2 = 0x3912a0151f6e0d36ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_control_boilerplate::statefb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_control_boilerplate/statefb";
  }

  static const char* value(const ::ros_control_boilerplate::statefb_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_control_boilerplate::statefb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16[6] statuswd\n"
"int32[6] actpos\n"
"uint16[6] err\n"
"int16[6] torque\n"
;
  }

  static const char* value(const ::ros_control_boilerplate::statefb_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_control_boilerplate::statefb_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.statuswd);
      stream.next(m.actpos);
      stream.next(m.err);
      stream.next(m.torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct statefb_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_control_boilerplate::statefb_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_control_boilerplate::statefb_<ContainerAllocator>& v)
  {
    s << indent << "statuswd[]" << std::endl;
    for (size_t i = 0; i < v.statuswd.size(); ++i)
    {
      s << indent << "  statuswd[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.statuswd[i]);
    }
    s << indent << "actpos[]" << std::endl;
    for (size_t i = 0; i < v.actpos.size(); ++i)
    {
      s << indent << "  actpos[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.actpos[i]);
    }
    s << indent << "err[]" << std::endl;
    for (size_t i = 0; i < v.err.size(); ++i)
    {
      s << indent << "  err[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.err[i]);
    }
    s << indent << "torque[]" << std::endl;
    for (size_t i = 0; i < v.torque.size(); ++i)
    {
      s << indent << "  torque[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.torque[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_CONTROL_BOILERPLATE_MESSAGE_STATEFB_H
