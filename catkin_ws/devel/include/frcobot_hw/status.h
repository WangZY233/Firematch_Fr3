// Generated by gencpp from file frcobot_hw/status.msg
// DO NOT EDIT!


#ifndef FRCOBOT_HW_MESSAGE_STATUS_H
#define FRCOBOT_HW_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace frcobot_hw
{
template <class ContainerAllocator>
struct status_
{
  typedef status_<ContainerAllocator> Type;

  status_()
    : header()
    , frame_count(0)
    , program_state(0)
    , error_code(0)
    , robot_mode(0)
    , cur_joints_pose()
    , cur_tcp_pose()
    , cur_joints_torque()
    , tool_num(0)
    , cl_dgt_output_h()
    , cl_dgt_output_l()
    , tl_dgt_output_l()
    , robot_motion_done(0)
    , gripper_motion_done(0)  {
    }
  status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , frame_count(0)
    , program_state(0)
    , error_code(0)
    , robot_mode(0)
    , cur_joints_pose(_alloc)
    , cur_tcp_pose(_alloc)
    , cur_joints_torque(_alloc)
    , tool_num(0)
    , cl_dgt_output_h(_alloc)
    , cl_dgt_output_l(_alloc)
    , tl_dgt_output_l(_alloc)
    , robot_motion_done(0)
    , gripper_motion_done(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _frame_count_type;
  _frame_count_type frame_count;

   typedef uint8_t _program_state_type;
  _program_state_type program_state;

   typedef uint8_t _error_code_type;
  _error_code_type error_code;

   typedef uint8_t _robot_mode_type;
  _robot_mode_type robot_mode;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _cur_joints_pose_type;
  _cur_joints_pose_type cur_joints_pose;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _cur_tcp_pose_type;
  _cur_tcp_pose_type cur_tcp_pose;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _cur_joints_torque_type;
  _cur_joints_torque_type cur_joints_torque;

   typedef uint8_t _tool_num_type;
  _tool_num_type tool_num;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _cl_dgt_output_h_type;
  _cl_dgt_output_h_type cl_dgt_output_h;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _cl_dgt_output_l_type;
  _cl_dgt_output_l_type cl_dgt_output_l;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _tl_dgt_output_l_type;
  _tl_dgt_output_l_type tl_dgt_output_l;

   typedef uint8_t _robot_motion_done_type;
  _robot_motion_done_type robot_motion_done;

   typedef uint8_t _gripper_motion_done_type;
  _gripper_motion_done_type gripper_motion_done;





  typedef boost::shared_ptr< ::frcobot_hw::status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::frcobot_hw::status_<ContainerAllocator> const> ConstPtr;

}; // struct status_

typedef ::frcobot_hw::status_<std::allocator<void> > status;

typedef boost::shared_ptr< ::frcobot_hw::status > statusPtr;
typedef boost::shared_ptr< ::frcobot_hw::status const> statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::frcobot_hw::status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::frcobot_hw::status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::frcobot_hw::status_<ContainerAllocator1> & lhs, const ::frcobot_hw::status_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.frame_count == rhs.frame_count &&
    lhs.program_state == rhs.program_state &&
    lhs.error_code == rhs.error_code &&
    lhs.robot_mode == rhs.robot_mode &&
    lhs.cur_joints_pose == rhs.cur_joints_pose &&
    lhs.cur_tcp_pose == rhs.cur_tcp_pose &&
    lhs.cur_joints_torque == rhs.cur_joints_torque &&
    lhs.tool_num == rhs.tool_num &&
    lhs.cl_dgt_output_h == rhs.cl_dgt_output_h &&
    lhs.cl_dgt_output_l == rhs.cl_dgt_output_l &&
    lhs.tl_dgt_output_l == rhs.tl_dgt_output_l &&
    lhs.robot_motion_done == rhs.robot_motion_done &&
    lhs.gripper_motion_done == rhs.gripper_motion_done;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::frcobot_hw::status_<ContainerAllocator1> & lhs, const ::frcobot_hw::status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace frcobot_hw

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::frcobot_hw::status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::frcobot_hw::status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::frcobot_hw::status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::frcobot_hw::status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::frcobot_hw::status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::frcobot_hw::status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::frcobot_hw::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e57754ebead024561f206770f4ce276";
  }

  static const char* value(const ::frcobot_hw::status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e57754ebead0245ULL;
  static const uint64_t static_value2 = 0x61f206770f4ce276ULL;
};

template<class ContainerAllocator>
struct DataType< ::frcobot_hw::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "frcobot_hw/status";
  }

  static const char* value(const ::frcobot_hw::status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::frcobot_hw::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"uint8 frame_count\n"
"uint8 program_state\n"
"uint8 error_code\n"
"uint8 robot_mode\n"
"float64[] cur_joints_pose\n"
"float64[] cur_tcp_pose\n"
"float64[] cur_joints_torque\n"
"uint8 tool_num\n"
"uint8[] cl_dgt_output_h\n"
"uint8[] cl_dgt_output_l\n"
"uint8[] tl_dgt_output_l\n"
"uint8 robot_motion_done\n"
"uint8 gripper_motion_done\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::frcobot_hw::status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::frcobot_hw::status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.frame_count);
      stream.next(m.program_state);
      stream.next(m.error_code);
      stream.next(m.robot_mode);
      stream.next(m.cur_joints_pose);
      stream.next(m.cur_tcp_pose);
      stream.next(m.cur_joints_torque);
      stream.next(m.tool_num);
      stream.next(m.cl_dgt_output_h);
      stream.next(m.cl_dgt_output_l);
      stream.next(m.tl_dgt_output_l);
      stream.next(m.robot_motion_done);
      stream.next(m.gripper_motion_done);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::frcobot_hw::status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::frcobot_hw::status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "frame_count: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.frame_count);
    s << indent << "program_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.program_state);
    s << indent << "error_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "robot_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robot_mode);
    s << indent << "cur_joints_pose[]" << std::endl;
    for (size_t i = 0; i < v.cur_joints_pose.size(); ++i)
    {
      s << indent << "  cur_joints_pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cur_joints_pose[i]);
    }
    s << indent << "cur_tcp_pose[]" << std::endl;
    for (size_t i = 0; i < v.cur_tcp_pose.size(); ++i)
    {
      s << indent << "  cur_tcp_pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cur_tcp_pose[i]);
    }
    s << indent << "cur_joints_torque[]" << std::endl;
    for (size_t i = 0; i < v.cur_joints_torque.size(); ++i)
    {
      s << indent << "  cur_joints_torque[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cur_joints_torque[i]);
    }
    s << indent << "tool_num: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tool_num);
    s << indent << "cl_dgt_output_h[]" << std::endl;
    for (size_t i = 0; i < v.cl_dgt_output_h.size(); ++i)
    {
      s << indent << "  cl_dgt_output_h[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cl_dgt_output_h[i]);
    }
    s << indent << "cl_dgt_output_l[]" << std::endl;
    for (size_t i = 0; i < v.cl_dgt_output_l.size(); ++i)
    {
      s << indent << "  cl_dgt_output_l[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cl_dgt_output_l[i]);
    }
    s << indent << "tl_dgt_output_l[]" << std::endl;
    for (size_t i = 0; i < v.tl_dgt_output_l.size(); ++i)
    {
      s << indent << "  tl_dgt_output_l[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.tl_dgt_output_l[i]);
    }
    s << indent << "robot_motion_done: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robot_motion_done);
    s << indent << "gripper_motion_done: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gripper_motion_done);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRCOBOT_HW_MESSAGE_STATUS_H
