# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_control_boilerplate/statefb.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class statefb(genpy.Message):
  _md5sum = "2ea94b11d87b20693912a0151f6e0d36"
  _type = "ros_control_boilerplate/statefb"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16[6] statuswd
int32[6] actpos
uint16[6] err
int16[6] torque"""
  __slots__ = ['statuswd','actpos','err','torque']
  _slot_types = ['uint16[6]','int32[6]','uint16[6]','int16[6]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       statuswd,actpos,err,torque

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(statefb, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.statuswd is None:
        self.statuswd = [0] * 6
      if self.actpos is None:
        self.actpos = [0] * 6
      if self.err is None:
        self.err = [0] * 6
      if self.torque is None:
        self.torque = [0] * 6
    else:
      self.statuswd = [0] * 6
      self.actpos = [0] * 6
      self.err = [0] * 6
      self.torque = [0] * 6

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_6H().pack(*self.statuswd))
      buff.write(_get_struct_6i().pack(*self.actpos))
      buff.write(_get_struct_6H().pack(*self.err))
      buff.write(_get_struct_6h().pack(*self.torque))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 12
      self.statuswd = _get_struct_6H().unpack(str[start:end])
      start = end
      end += 24
      self.actpos = _get_struct_6i().unpack(str[start:end])
      start = end
      end += 12
      self.err = _get_struct_6H().unpack(str[start:end])
      start = end
      end += 12
      self.torque = _get_struct_6h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.statuswd.tostring())
      buff.write(self.actpos.tostring())
      buff.write(self.err.tostring())
      buff.write(self.torque.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 12
      self.statuswd = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=6)
      start = end
      end += 24
      self.actpos = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=6)
      start = end
      end += 12
      self.err = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=6)
      start = end
      end += 12
      self.torque = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=6)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6H = None
def _get_struct_6H():
    global _struct_6H
    if _struct_6H is None:
        _struct_6H = struct.Struct("<6H")
    return _struct_6H
_struct_6h = None
def _get_struct_6h():
    global _struct_6h
    if _struct_6h is None:
        _struct_6h = struct.Struct("<6h")
    return _struct_6h
_struct_6i = None
def _get_struct_6i():
    global _struct_6i
    if _struct_6i is None:
        _struct_6i = struct.Struct("<6i")
    return _struct_6i
